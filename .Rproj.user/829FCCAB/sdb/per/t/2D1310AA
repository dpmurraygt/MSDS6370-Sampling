{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Lab 4 R Version\"\noutput: html_notebook\n---\n\n```{r}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(ggthemes)\nlibrary(magrittr)\n```\n\n\n```{r}\nIndustryTwo<-read_xlsx(\"Lab4_Files/MSDS6370_LAB04.xlsx\")\n\n```\n\n\n```{r fig.width=8.5, fig.height=4}\nIndustryTwo %>% ggplot(aes(x=mos)) + geom_histogram() + facet_wrap(~stratum, ncol=5) + scale_x_continuous(breaks=c(0, 500000)) + ggtitle(\"MOS by Stratum\")\n\n```\n\nYou may use SAS proc means or Excel to calculate the means, sums, and standard deviations required for the allocations in No. 1, 2, 3.\n\n1.  For a sample of size 50 from the population for Industry 2, use proportional allocation to determine the sample size for each of the 5 strata.  Enter these in Table 1 on the Results page.\n\n```{r}\nsample_Size = 50\nCountsByStrata <- IndustryTwo %>% group_by(stratum) %>% summarise(count=n()) %>% mutate(share=count/sum(count)) %>% mutate(FromThisStratum= round(sample_Size * share, 0), Unrounded=(sample_Size * share))\nCountsByStrata\n\n```\n\n2.  For a sample of size 50 from the population for Industry 2, determine the sample size for each of the 5 strata using Neyman allocation where the administrative measure of size of each unit is used in calculating standard deviation for each stratum.  Enter these in Table 2 on the Results page\n\n```{r}\nsample_Size = 50\nCountsByStrata <- IndustryTwo %>% group_by(stratum) %>% summarise(count=n(), Size = sd(mos)) %>% mutate(share=Size/sum(Size)) %>% mutate(weight=Size, FromThisStratum= round(sample_Size * share, 0), unrounded=sample_Size * share)\nCountsByStrata\n\n```\n\n3.  For a sample of size 50 from the population for Industry 2, determine the sample size for each of the 5 strata using the sum of the measure of size in stratum h in place of N_h Ïƒ_h in a Neyman allocation.  Enter these in Table 3 on the Results page.   \n\n\n\n```{r}\nsample_Size = 50\nCountsByStrata <- IndustryTwo %>% group_by(stratum) %>% summarise(count=n(), Size = sum(mos)) %>% mutate(share=Size/sum(Size)) %>% mutate(weight=Size, FromThisStratum= round(sample_Size * share, 0), unrounded=sample_Size * share)\nCountsByStrata\n\n\n```\n\n\n4. \n(a) Use SAS Procedure Surveyselect to select a sample of size 50 using the proportional allocation to strata as determined in No. 1 above. Output the selected units to a file named propsample. \n```{r}\nstratumName<-c(1, 2, 3, 4, 5)\nselection<-c(19, 13, 8, 5, 5)\n\nthisStratum <- 1\n\nAllSamples<-data.frame()\n\nfor (thisStratum in stratumName) {\n  Sampled <-  IndustryTwo %>% filter(stratum == thisStratum) %>% sample_n(selection[thisStratum], replace=FALSE) %>% group_by(stratum) %>% summarise(SampleMean = mean(Sales), SampleSD = sd(Sales))\n\n  AllSamples <- rbind(AllSamples, Sampled)\n  \n}\n\n```\n\n\n(b)  Use SAS Procedure Surveymeans and the sample selected using Neyman allocation to form the same estimates in 4 (a).  Enter the estimates from both samples on the Results page.  \n```{r}\nstratumName<-c(1, 2, 3, 4, 5)\nselection<-c(4, 5, 10, 13, 18)\n\nthisStratum <- 1\n\nAllSamples<-data.frame()\n\nfor (thisStratum in stratumName) {\n  Sampled <-  IndustryTwo %>% filter(stratum == thisStratum) %>% sample_n(selection[thisStratum], replace=FALSE) %>% group_by(stratum) %>% summarise(SampleMean = mean(Sales), SampleSD = sd(Sales))\n\n  AllSamples <- rbind(AllSamples, Sampled)\n  \n}\n\n```\n\n(C)  Use SAS Procedure Surveymeans and the sample selected using Neyman allocation to form the same estimates in 4 (a).  Enter the estimates from both samples on the Results page.  \n```{r}\nstratumName<-c(1, 2, 3, 4, 5)\nselection<-c(3, 7, 11, 12, 17)\n\nthisStratum <- 1\n\nAllSamples<-data.frame()\n\nfor (thisStratum in stratumName) {\n  Sampled <-  IndustryTwo %>% filter(stratum == thisStratum) %>% sample_n(selection[thisStratum], replace=FALSE) %>% group_by(stratum) %>% summarise(SampleMean = mean(Sales), SampleSD = sd(Sales))\n\n  AllSamples <- rbind(AllSamples, Sampled)\n  \n}\n\n```",
    "created" : 1517707194442.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1734640627",
    "id" : "2D1310AA",
    "lastKnownWriteTime" : 1518375189,
    "last_content_update" : 1518375189204,
    "path" : "~/R Projects/MSDS6370 Sampling/Lab4.Rmd",
    "project_path" : "Lab4.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "tempName" : "Untitled1"
    },
    "relative_order" : 14,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}